
LAB_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001454  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001560  08001560  00011560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001584  08001584  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001584  08001584  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001584  08001584  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001584  08001584  00011584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001588  08001588  00011588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800158c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000000c  08001598  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08001598  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003482  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001096  00000000  00000000  000234b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000418  00000000  00000000  00024550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000370  00000000  00000000  00024968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015937  00000000  00000000  00024cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000526c  00000000  00000000  0003a60f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079a33  00000000  00000000  0003f87b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b92ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dac  00000000  00000000  000b9304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001548 	.word	0x08001548

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001548 	.word	0x08001548

0800014c <turnOff7SEG>:
 */

#include "main.h"
#include "display7SEG.h"

void turnOff7SEG() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(segA_GPIO_Port, segA_Pin, 1);
 8000150:	2201      	movs	r2, #1
 8000152:	2101      	movs	r1, #1
 8000154:	4811      	ldr	r0, [pc, #68]	; (800019c <turnOff7SEG+0x50>)
 8000156:	f000 fdd7 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segB_GPIO_Port, segB_Pin, 1);
 800015a:	2201      	movs	r2, #1
 800015c:	2102      	movs	r1, #2
 800015e:	480f      	ldr	r0, [pc, #60]	; (800019c <turnOff7SEG+0x50>)
 8000160:	f000 fdd2 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segC_GPIO_Port, segC_Pin, 1);
 8000164:	2201      	movs	r2, #1
 8000166:	2104      	movs	r1, #4
 8000168:	480c      	ldr	r0, [pc, #48]	; (800019c <turnOff7SEG+0x50>)
 800016a:	f000 fdcd 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segD_GPIO_Port, segD_Pin, 1);
 800016e:	2201      	movs	r2, #1
 8000170:	2108      	movs	r1, #8
 8000172:	480a      	ldr	r0, [pc, #40]	; (800019c <turnOff7SEG+0x50>)
 8000174:	f000 fdc8 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segE_GPIO_Port, segE_Pin, 1);
 8000178:	2201      	movs	r2, #1
 800017a:	2110      	movs	r1, #16
 800017c:	4807      	ldr	r0, [pc, #28]	; (800019c <turnOff7SEG+0x50>)
 800017e:	f000 fdc3 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segF_GPIO_Port, segF_Pin, 1);
 8000182:	2201      	movs	r2, #1
 8000184:	2120      	movs	r1, #32
 8000186:	4805      	ldr	r0, [pc, #20]	; (800019c <turnOff7SEG+0x50>)
 8000188:	f000 fdbe 	bl	8000d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segG_GPIO_Port, segG_Pin, 1);
 800018c:	2201      	movs	r2, #1
 800018e:	2140      	movs	r1, #64	; 0x40
 8000190:	4802      	ldr	r0, [pc, #8]	; (800019c <turnOff7SEG+0x50>)
 8000192:	f000 fdb9 	bl	8000d08 <HAL_GPIO_WritePin>
}
 8000196:	bf00      	nop
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	40010c00 	.word	0x40010c00

080001a0 <display7SEG>:

void display7SEG(int num) {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	turnOff7SEG();
 80001a8:	f7ff ffd0 	bl	800014c <turnOff7SEG>
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	2b09      	cmp	r3, #9
 80001b0:	f200 8117 	bhi.w	80003e2 <display7SEG+0x242>
 80001b4:	a201      	add	r2, pc, #4	; (adr r2, 80001bc <display7SEG+0x1c>)
 80001b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ba:	bf00      	nop
 80001bc:	080001e5 	.word	0x080001e5
 80001c0:	08000223 	.word	0x08000223
 80001c4:	08000239 	.word	0x08000239
 80001c8:	0800026d 	.word	0x0800026d
 80001cc:	080002a1 	.word	0x080002a1
 80001d0:	080002cb 	.word	0x080002cb
 80001d4:	080002ff 	.word	0x080002ff
 80001d8:	0800033d 	.word	0x0800033d
 80001dc:	0800035d 	.word	0x0800035d
 80001e0:	080003a5 	.word	0x080003a5
	switch (num) {
	case 0: {
		HAL_GPIO_WritePin(segA_GPIO_Port, segA_Pin, 0);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2101      	movs	r1, #1
 80001e8:	4880      	ldr	r0, [pc, #512]	; (80003ec <display7SEG+0x24c>)
 80001ea:	f000 fd8d 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segB_GPIO_Port, segB_Pin, 0);
 80001ee:	2200      	movs	r2, #0
 80001f0:	2102      	movs	r1, #2
 80001f2:	487e      	ldr	r0, [pc, #504]	; (80003ec <display7SEG+0x24c>)
 80001f4:	f000 fd88 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segC_GPIO_Port, segC_Pin, 0);
 80001f8:	2200      	movs	r2, #0
 80001fa:	2104      	movs	r1, #4
 80001fc:	487b      	ldr	r0, [pc, #492]	; (80003ec <display7SEG+0x24c>)
 80001fe:	f000 fd83 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segD_GPIO_Port, segD_Pin, 0);
 8000202:	2200      	movs	r2, #0
 8000204:	2108      	movs	r1, #8
 8000206:	4879      	ldr	r0, [pc, #484]	; (80003ec <display7SEG+0x24c>)
 8000208:	f000 fd7e 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segE_GPIO_Port, segE_Pin, 0);
 800020c:	2200      	movs	r2, #0
 800020e:	2110      	movs	r1, #16
 8000210:	4876      	ldr	r0, [pc, #472]	; (80003ec <display7SEG+0x24c>)
 8000212:	f000 fd79 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segF_GPIO_Port, segF_Pin, 0);
 8000216:	2200      	movs	r2, #0
 8000218:	2120      	movs	r1, #32
 800021a:	4874      	ldr	r0, [pc, #464]	; (80003ec <display7SEG+0x24c>)
 800021c:	f000 fd74 	bl	8000d08 <HAL_GPIO_WritePin>

		break;
 8000220:	e0e0      	b.n	80003e4 <display7SEG+0x244>
	}
	case 1: {
		HAL_GPIO_WritePin(segB_GPIO_Port, segB_Pin, 0);
 8000222:	2200      	movs	r2, #0
 8000224:	2102      	movs	r1, #2
 8000226:	4871      	ldr	r0, [pc, #452]	; (80003ec <display7SEG+0x24c>)
 8000228:	f000 fd6e 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segC_GPIO_Port, segC_Pin, 0);
 800022c:	2200      	movs	r2, #0
 800022e:	2104      	movs	r1, #4
 8000230:	486e      	ldr	r0, [pc, #440]	; (80003ec <display7SEG+0x24c>)
 8000232:	f000 fd69 	bl	8000d08 <HAL_GPIO_WritePin>

		break;
 8000236:	e0d5      	b.n	80003e4 <display7SEG+0x244>
	}
	case 2: {
		HAL_GPIO_WritePin(segA_GPIO_Port, segA_Pin, 0);
 8000238:	2200      	movs	r2, #0
 800023a:	2101      	movs	r1, #1
 800023c:	486b      	ldr	r0, [pc, #428]	; (80003ec <display7SEG+0x24c>)
 800023e:	f000 fd63 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segB_GPIO_Port, segB_Pin, 0);
 8000242:	2200      	movs	r2, #0
 8000244:	2102      	movs	r1, #2
 8000246:	4869      	ldr	r0, [pc, #420]	; (80003ec <display7SEG+0x24c>)
 8000248:	f000 fd5e 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segD_GPIO_Port, segD_Pin, 0);
 800024c:	2200      	movs	r2, #0
 800024e:	2108      	movs	r1, #8
 8000250:	4866      	ldr	r0, [pc, #408]	; (80003ec <display7SEG+0x24c>)
 8000252:	f000 fd59 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segE_GPIO_Port, segE_Pin, 0);
 8000256:	2200      	movs	r2, #0
 8000258:	2110      	movs	r1, #16
 800025a:	4864      	ldr	r0, [pc, #400]	; (80003ec <display7SEG+0x24c>)
 800025c:	f000 fd54 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segG_GPIO_Port, segG_Pin, 0);
 8000260:	2200      	movs	r2, #0
 8000262:	2140      	movs	r1, #64	; 0x40
 8000264:	4861      	ldr	r0, [pc, #388]	; (80003ec <display7SEG+0x24c>)
 8000266:	f000 fd4f 	bl	8000d08 <HAL_GPIO_WritePin>

		break;
 800026a:	e0bb      	b.n	80003e4 <display7SEG+0x244>
	}
	case 3: {
		HAL_GPIO_WritePin(segA_GPIO_Port, segA_Pin, 0);
 800026c:	2200      	movs	r2, #0
 800026e:	2101      	movs	r1, #1
 8000270:	485e      	ldr	r0, [pc, #376]	; (80003ec <display7SEG+0x24c>)
 8000272:	f000 fd49 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segB_GPIO_Port, segB_Pin, 0);
 8000276:	2200      	movs	r2, #0
 8000278:	2102      	movs	r1, #2
 800027a:	485c      	ldr	r0, [pc, #368]	; (80003ec <display7SEG+0x24c>)
 800027c:	f000 fd44 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segC_GPIO_Port, segC_Pin, 0);
 8000280:	2200      	movs	r2, #0
 8000282:	2104      	movs	r1, #4
 8000284:	4859      	ldr	r0, [pc, #356]	; (80003ec <display7SEG+0x24c>)
 8000286:	f000 fd3f 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segD_GPIO_Port, segD_Pin, 0);
 800028a:	2200      	movs	r2, #0
 800028c:	2108      	movs	r1, #8
 800028e:	4857      	ldr	r0, [pc, #348]	; (80003ec <display7SEG+0x24c>)
 8000290:	f000 fd3a 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segG_GPIO_Port, segG_Pin, 0);
 8000294:	2200      	movs	r2, #0
 8000296:	2140      	movs	r1, #64	; 0x40
 8000298:	4854      	ldr	r0, [pc, #336]	; (80003ec <display7SEG+0x24c>)
 800029a:	f000 fd35 	bl	8000d08 <HAL_GPIO_WritePin>

		break;
 800029e:	e0a1      	b.n	80003e4 <display7SEG+0x244>
	}
	case 4: {

		HAL_GPIO_WritePin(segB_GPIO_Port, segB_Pin, 0);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2102      	movs	r1, #2
 80002a4:	4851      	ldr	r0, [pc, #324]	; (80003ec <display7SEG+0x24c>)
 80002a6:	f000 fd2f 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segC_GPIO_Port, segC_Pin, 0);
 80002aa:	2200      	movs	r2, #0
 80002ac:	2104      	movs	r1, #4
 80002ae:	484f      	ldr	r0, [pc, #316]	; (80003ec <display7SEG+0x24c>)
 80002b0:	f000 fd2a 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segF_GPIO_Port, segF_Pin, 0);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2120      	movs	r1, #32
 80002b8:	484c      	ldr	r0, [pc, #304]	; (80003ec <display7SEG+0x24c>)
 80002ba:	f000 fd25 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segG_GPIO_Port, segG_Pin, 0);
 80002be:	2200      	movs	r2, #0
 80002c0:	2140      	movs	r1, #64	; 0x40
 80002c2:	484a      	ldr	r0, [pc, #296]	; (80003ec <display7SEG+0x24c>)
 80002c4:	f000 fd20 	bl	8000d08 <HAL_GPIO_WritePin>

		break;
 80002c8:	e08c      	b.n	80003e4 <display7SEG+0x244>
	}
	case 5: {
		HAL_GPIO_WritePin(segA_GPIO_Port, segA_Pin, 0);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2101      	movs	r1, #1
 80002ce:	4847      	ldr	r0, [pc, #284]	; (80003ec <display7SEG+0x24c>)
 80002d0:	f000 fd1a 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segC_GPIO_Port, segC_Pin, 0);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2104      	movs	r1, #4
 80002d8:	4844      	ldr	r0, [pc, #272]	; (80003ec <display7SEG+0x24c>)
 80002da:	f000 fd15 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segD_GPIO_Port, segD_Pin, 0);
 80002de:	2200      	movs	r2, #0
 80002e0:	2108      	movs	r1, #8
 80002e2:	4842      	ldr	r0, [pc, #264]	; (80003ec <display7SEG+0x24c>)
 80002e4:	f000 fd10 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segF_GPIO_Port, segF_Pin, 0);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2120      	movs	r1, #32
 80002ec:	483f      	ldr	r0, [pc, #252]	; (80003ec <display7SEG+0x24c>)
 80002ee:	f000 fd0b 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segG_GPIO_Port, segG_Pin, 0);
 80002f2:	2200      	movs	r2, #0
 80002f4:	2140      	movs	r1, #64	; 0x40
 80002f6:	483d      	ldr	r0, [pc, #244]	; (80003ec <display7SEG+0x24c>)
 80002f8:	f000 fd06 	bl	8000d08 <HAL_GPIO_WritePin>

		break;
 80002fc:	e072      	b.n	80003e4 <display7SEG+0x244>
	}
	case 6: {
		HAL_GPIO_WritePin(segA_GPIO_Port, segA_Pin, 0);
 80002fe:	2200      	movs	r2, #0
 8000300:	2101      	movs	r1, #1
 8000302:	483a      	ldr	r0, [pc, #232]	; (80003ec <display7SEG+0x24c>)
 8000304:	f000 fd00 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segC_GPIO_Port, segC_Pin, 0);
 8000308:	2200      	movs	r2, #0
 800030a:	2104      	movs	r1, #4
 800030c:	4837      	ldr	r0, [pc, #220]	; (80003ec <display7SEG+0x24c>)
 800030e:	f000 fcfb 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segD_GPIO_Port, segD_Pin, 0);
 8000312:	2200      	movs	r2, #0
 8000314:	2108      	movs	r1, #8
 8000316:	4835      	ldr	r0, [pc, #212]	; (80003ec <display7SEG+0x24c>)
 8000318:	f000 fcf6 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segE_GPIO_Port, segE_Pin, 0);
 800031c:	2200      	movs	r2, #0
 800031e:	2110      	movs	r1, #16
 8000320:	4832      	ldr	r0, [pc, #200]	; (80003ec <display7SEG+0x24c>)
 8000322:	f000 fcf1 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segF_GPIO_Port, segF_Pin, 0);
 8000326:	2200      	movs	r2, #0
 8000328:	2120      	movs	r1, #32
 800032a:	4830      	ldr	r0, [pc, #192]	; (80003ec <display7SEG+0x24c>)
 800032c:	f000 fcec 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segG_GPIO_Port, segG_Pin, 0);
 8000330:	2200      	movs	r2, #0
 8000332:	2140      	movs	r1, #64	; 0x40
 8000334:	482d      	ldr	r0, [pc, #180]	; (80003ec <display7SEG+0x24c>)
 8000336:	f000 fce7 	bl	8000d08 <HAL_GPIO_WritePin>

		break;
 800033a:	e053      	b.n	80003e4 <display7SEG+0x244>
	}
	case 7: {
		HAL_GPIO_WritePin(segA_GPIO_Port, segA_Pin, 0);
 800033c:	2200      	movs	r2, #0
 800033e:	2101      	movs	r1, #1
 8000340:	482a      	ldr	r0, [pc, #168]	; (80003ec <display7SEG+0x24c>)
 8000342:	f000 fce1 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segB_GPIO_Port, segB_Pin, 0);
 8000346:	2200      	movs	r2, #0
 8000348:	2102      	movs	r1, #2
 800034a:	4828      	ldr	r0, [pc, #160]	; (80003ec <display7SEG+0x24c>)
 800034c:	f000 fcdc 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segC_GPIO_Port, segC_Pin, 0);
 8000350:	2200      	movs	r2, #0
 8000352:	2104      	movs	r1, #4
 8000354:	4825      	ldr	r0, [pc, #148]	; (80003ec <display7SEG+0x24c>)
 8000356:	f000 fcd7 	bl	8000d08 <HAL_GPIO_WritePin>

		break;
 800035a:	e043      	b.n	80003e4 <display7SEG+0x244>
	}
	case 8: {
		HAL_GPIO_WritePin(segA_GPIO_Port, segA_Pin, 0);
 800035c:	2200      	movs	r2, #0
 800035e:	2101      	movs	r1, #1
 8000360:	4822      	ldr	r0, [pc, #136]	; (80003ec <display7SEG+0x24c>)
 8000362:	f000 fcd1 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segB_GPIO_Port, segB_Pin, 0);
 8000366:	2200      	movs	r2, #0
 8000368:	2102      	movs	r1, #2
 800036a:	4820      	ldr	r0, [pc, #128]	; (80003ec <display7SEG+0x24c>)
 800036c:	f000 fccc 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segC_GPIO_Port, segC_Pin, 0);
 8000370:	2200      	movs	r2, #0
 8000372:	2104      	movs	r1, #4
 8000374:	481d      	ldr	r0, [pc, #116]	; (80003ec <display7SEG+0x24c>)
 8000376:	f000 fcc7 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segD_GPIO_Port, segD_Pin, 0);
 800037a:	2200      	movs	r2, #0
 800037c:	2108      	movs	r1, #8
 800037e:	481b      	ldr	r0, [pc, #108]	; (80003ec <display7SEG+0x24c>)
 8000380:	f000 fcc2 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segE_GPIO_Port, segE_Pin, 0);
 8000384:	2200      	movs	r2, #0
 8000386:	2110      	movs	r1, #16
 8000388:	4818      	ldr	r0, [pc, #96]	; (80003ec <display7SEG+0x24c>)
 800038a:	f000 fcbd 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segF_GPIO_Port, segF_Pin, 0);
 800038e:	2200      	movs	r2, #0
 8000390:	2120      	movs	r1, #32
 8000392:	4816      	ldr	r0, [pc, #88]	; (80003ec <display7SEG+0x24c>)
 8000394:	f000 fcb8 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segG_GPIO_Port, segG_Pin, 0);
 8000398:	2200      	movs	r2, #0
 800039a:	2140      	movs	r1, #64	; 0x40
 800039c:	4813      	ldr	r0, [pc, #76]	; (80003ec <display7SEG+0x24c>)
 800039e:	f000 fcb3 	bl	8000d08 <HAL_GPIO_WritePin>

		break;
 80003a2:	e01f      	b.n	80003e4 <display7SEG+0x244>
	}
	case 9: {
		HAL_GPIO_WritePin(segA_GPIO_Port, segA_Pin, 0);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2101      	movs	r1, #1
 80003a8:	4810      	ldr	r0, [pc, #64]	; (80003ec <display7SEG+0x24c>)
 80003aa:	f000 fcad 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segB_GPIO_Port, segB_Pin, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2102      	movs	r1, #2
 80003b2:	480e      	ldr	r0, [pc, #56]	; (80003ec <display7SEG+0x24c>)
 80003b4:	f000 fca8 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segC_GPIO_Port, segC_Pin, 0);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2104      	movs	r1, #4
 80003bc:	480b      	ldr	r0, [pc, #44]	; (80003ec <display7SEG+0x24c>)
 80003be:	f000 fca3 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segD_GPIO_Port, segD_Pin, 0);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2108      	movs	r1, #8
 80003c6:	4809      	ldr	r0, [pc, #36]	; (80003ec <display7SEG+0x24c>)
 80003c8:	f000 fc9e 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segF_GPIO_Port, segF_Pin, 0);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2120      	movs	r1, #32
 80003d0:	4806      	ldr	r0, [pc, #24]	; (80003ec <display7SEG+0x24c>)
 80003d2:	f000 fc99 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(segG_GPIO_Port, segG_Pin, 0);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2140      	movs	r1, #64	; 0x40
 80003da:	4804      	ldr	r0, [pc, #16]	; (80003ec <display7SEG+0x24c>)
 80003dc:	f000 fc94 	bl	8000d08 <HAL_GPIO_WritePin>

		break;
 80003e0:	e000      	b.n	80003e4 <display7SEG+0x244>
	}
	default: {
		break;
 80003e2:	bf00      	nop
	}
	}
}
 80003e4:	bf00      	nop
 80003e6:	3708      	adds	r7, #8
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	40010c00 	.word	0x40010c00

080003f0 <trafficLightsFSM>:
#include "fsm.h"

int status = INIT;
int counter = 0;

void trafficLightsFSM() {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	display7SEG(counter--);
 80003f4:	4b3a      	ldr	r3, [pc, #232]	; (80004e0 <trafficLightsFSM+0xf0>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	1e5a      	subs	r2, r3, #1
 80003fa:	4939      	ldr	r1, [pc, #228]	; (80004e0 <trafficLightsFSM+0xf0>)
 80003fc:	600a      	str	r2, [r1, #0]
 80003fe:	4618      	mov	r0, r3
 8000400:	f7ff fece 	bl	80001a0 <display7SEG>
	switch (status) {
 8000404:	4b37      	ldr	r3, [pc, #220]	; (80004e4 <trafficLightsFSM+0xf4>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2b03      	cmp	r3, #3
 800040a:	d860      	bhi.n	80004ce <trafficLightsFSM+0xde>
 800040c:	a201      	add	r2, pc, #4	; (adr r2, 8000414 <trafficLightsFSM+0x24>)
 800040e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000412:	bf00      	nop
 8000414:	08000425 	.word	0x08000425
 8000418:	08000451 	.word	0x08000451
 800041c:	0800047b 	.word	0x0800047b
 8000420:	080004a5 	.word	0x080004a5
	case INIT: {
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 1);
 8000424:	2201      	movs	r2, #1
 8000426:	2120      	movs	r1, #32
 8000428:	482f      	ldr	r0, [pc, #188]	; (80004e8 <trafficLightsFSM+0xf8>)
 800042a:	f000 fc6d 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, 0);
 800042e:	2200      	movs	r2, #0
 8000430:	2140      	movs	r1, #64	; 0x40
 8000432:	482d      	ldr	r0, [pc, #180]	; (80004e8 <trafficLightsFSM+0xf8>)
 8000434:	f000 fc68 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, YELLOW_1_Pin, 0);
 8000438:	2200      	movs	r2, #0
 800043a:	2140      	movs	r1, #64	; 0x40
 800043c:	482a      	ldr	r0, [pc, #168]	; (80004e8 <trafficLightsFSM+0xf8>)
 800043e:	f000 fc63 	bl	8000d08 <HAL_GPIO_WritePin>

		status = RED;
 8000442:	4b28      	ldr	r3, [pc, #160]	; (80004e4 <trafficLightsFSM+0xf4>)
 8000444:	2201      	movs	r2, #1
 8000446:	601a      	str	r2, [r3, #0]
		counter = 5;
 8000448:	4b25      	ldr	r3, [pc, #148]	; (80004e0 <trafficLightsFSM+0xf0>)
 800044a:	2205      	movs	r2, #5
 800044c:	601a      	str	r2, [r3, #0]

		break;
 800044e:	e045      	b.n	80004dc <trafficLightsFSM+0xec>
	}
	case RED: {
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, 0);
 8000450:	2200      	movs	r2, #0
 8000452:	2140      	movs	r1, #64	; 0x40
 8000454:	4824      	ldr	r0, [pc, #144]	; (80004e8 <trafficLightsFSM+0xf8>)
 8000456:	f000 fc57 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 1);
 800045a:	2201      	movs	r2, #1
 800045c:	2120      	movs	r1, #32
 800045e:	4822      	ldr	r0, [pc, #136]	; (80004e8 <trafficLightsFSM+0xf8>)
 8000460:	f000 fc52 	bl	8000d08 <HAL_GPIO_WritePin>

		if (counter <= 0) {
 8000464:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <trafficLightsFSM+0xf0>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	dc32      	bgt.n	80004d2 <trafficLightsFSM+0xe2>
			status = GREEN;
 800046c:	4b1d      	ldr	r3, [pc, #116]	; (80004e4 <trafficLightsFSM+0xf4>)
 800046e:	2202      	movs	r2, #2
 8000470:	601a      	str	r2, [r3, #0]
			counter = 3;
 8000472:	4b1b      	ldr	r3, [pc, #108]	; (80004e0 <trafficLightsFSM+0xf0>)
 8000474:	2203      	movs	r2, #3
 8000476:	601a      	str	r2, [r3, #0]
		}

		break;
 8000478:	e02b      	b.n	80004d2 <trafficLightsFSM+0xe2>
	}
	case GREEN: {
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2120      	movs	r1, #32
 800047e:	481a      	ldr	r0, [pc, #104]	; (80004e8 <trafficLightsFSM+0xf8>)
 8000480:	f000 fc42 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, 1);
 8000484:	2201      	movs	r2, #1
 8000486:	2180      	movs	r1, #128	; 0x80
 8000488:	4817      	ldr	r0, [pc, #92]	; (80004e8 <trafficLightsFSM+0xf8>)
 800048a:	f000 fc3d 	bl	8000d08 <HAL_GPIO_WritePin>

		if (counter <= 0) {
 800048e:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <trafficLightsFSM+0xf0>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	2b00      	cmp	r3, #0
 8000494:	dc1f      	bgt.n	80004d6 <trafficLightsFSM+0xe6>
			status = YELLOW;
 8000496:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <trafficLightsFSM+0xf4>)
 8000498:	2203      	movs	r2, #3
 800049a:	601a      	str	r2, [r3, #0]
			counter = 2;
 800049c:	4b10      	ldr	r3, [pc, #64]	; (80004e0 <trafficLightsFSM+0xf0>)
 800049e:	2202      	movs	r2, #2
 80004a0:	601a      	str	r2, [r3, #0]
		}

		break;
 80004a2:	e018      	b.n	80004d6 <trafficLightsFSM+0xe6>
	}
	case YELLOW: {
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, 0);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2180      	movs	r1, #128	; 0x80
 80004a8:	480f      	ldr	r0, [pc, #60]	; (80004e8 <trafficLightsFSM+0xf8>)
 80004aa:	f000 fc2d 	bl	8000d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, 1);
 80004ae:	2201      	movs	r2, #1
 80004b0:	2140      	movs	r1, #64	; 0x40
 80004b2:	480d      	ldr	r0, [pc, #52]	; (80004e8 <trafficLightsFSM+0xf8>)
 80004b4:	f000 fc28 	bl	8000d08 <HAL_GPIO_WritePin>

		if (counter <= 0) {
 80004b8:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <trafficLightsFSM+0xf0>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	dc0c      	bgt.n	80004da <trafficLightsFSM+0xea>
			status = RED;
 80004c0:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <trafficLightsFSM+0xf4>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	601a      	str	r2, [r3, #0]
			counter = 5;
 80004c6:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <trafficLightsFSM+0xf0>)
 80004c8:	2205      	movs	r2, #5
 80004ca:	601a      	str	r2, [r3, #0]
		}

		break;
 80004cc:	e005      	b.n	80004da <trafficLightsFSM+0xea>
	}
	default:
		break;
 80004ce:	bf00      	nop
 80004d0:	e004      	b.n	80004dc <trafficLightsFSM+0xec>
		break;
 80004d2:	bf00      	nop
 80004d4:	e002      	b.n	80004dc <trafficLightsFSM+0xec>
		break;
 80004d6:	bf00      	nop
 80004d8:	e000      	b.n	80004dc <trafficLightsFSM+0xec>
		break;
 80004da:	bf00      	nop
	}
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	2000002c 	.word	0x2000002c
 80004e4:	20000028 	.word	0x20000028
 80004e8:	40010800 	.word	0x40010800

080004ec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004f0:	f000 f926 	bl	8000740 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004f4:	f000 f809 	bl	800050a <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004f8:	f000 f842 	bl	8000580 <MX_GPIO_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		trafficLightsFSM();
 80004fc:	f7ff ff78 	bl	80003f0 <trafficLightsFSM>
		HAL_Delay(1000);
 8000500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000504:	f000 f97e 	bl	8000804 <HAL_Delay>
		trafficLightsFSM();
 8000508:	e7f8      	b.n	80004fc <main+0x10>

0800050a <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800050a:	b580      	push	{r7, lr}
 800050c:	b090      	sub	sp, #64	; 0x40
 800050e:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000510:	f107 0318 	add.w	r3, r7, #24
 8000514:	2228      	movs	r2, #40	; 0x28
 8000516:	2100      	movs	r1, #0
 8000518:	4618      	mov	r0, r3
 800051a:	f001 f80d 	bl	8001538 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052c:	2302      	movs	r3, #2
 800052e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000530:	2301      	movs	r3, #1
 8000532:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000534:	2310      	movs	r3, #16
 8000536:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000538:	2300      	movs	r3, #0
 800053a:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800053c:	f107 0318 	add.w	r3, r7, #24
 8000540:	4618      	mov	r0, r3
 8000542:	f000 fbf9 	bl	8000d38 <HAL_RCC_OscConfig>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x46>
		Error_Handler();
 800054c:	f000 f86c 	bl	8000628 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000550:	230f      	movs	r3, #15
 8000552:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2100      	movs	r1, #0
 8000568:	4618      	mov	r0, r3
 800056a:	f000 fe65 	bl	8001238 <HAL_RCC_ClockConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x6e>
		Error_Handler();
 8000574:	f000 f858 	bl	8000628 <Error_Handler>
	}
}
 8000578:	bf00      	nop
 800057a:	3740      	adds	r7, #64	; 0x40
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000586:	f107 0308 	add.w	r3, r7, #8
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000594:	4b21      	ldr	r3, [pc, #132]	; (800061c <MX_GPIO_Init+0x9c>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a20      	ldr	r2, [pc, #128]	; (800061c <MX_GPIO_Init+0x9c>)
 800059a:	f043 0304 	orr.w	r3, r3, #4
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b1e      	ldr	r3, [pc, #120]	; (800061c <MX_GPIO_Init+0x9c>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f003 0304 	and.w	r3, r3, #4
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005ac:	4b1b      	ldr	r3, [pc, #108]	; (800061c <MX_GPIO_Init+0x9c>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a1a      	ldr	r2, [pc, #104]	; (800061c <MX_GPIO_Init+0x9c>)
 80005b2:	f043 0308 	orr.w	r3, r3, #8
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b18      	ldr	r3, [pc, #96]	; (800061c <MX_GPIO_Init+0x9c>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0308 	and.w	r3, r3, #8
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80005ca:	4815      	ldr	r0, [pc, #84]	; (8000620 <MX_GPIO_Init+0xa0>)
 80005cc:	f000 fb9c 	bl	8000d08 <HAL_GPIO_WritePin>
			RED_1_Pin | YELLOW_1_Pin | GREEN_1_Pin | RED_2_Pin | YELLOW_2_Pin
					| GREEN_2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80005d0:	2200      	movs	r2, #0
 80005d2:	217f      	movs	r1, #127	; 0x7f
 80005d4:	4813      	ldr	r0, [pc, #76]	; (8000624 <MX_GPIO_Init+0xa4>)
 80005d6:	f000 fb97 	bl	8000d08 <HAL_GPIO_WritePin>
	segA_Pin | segB_Pin | segC_Pin | segD_Pin | segE_Pin | segF_Pin | segG_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : RED_1_Pin YELLOW_1_Pin GREEN_1_Pin RED_2_Pin
	 YELLOW_2_Pin GREEN_2_Pin */
	GPIO_InitStruct.Pin = RED_1_Pin | YELLOW_1_Pin | GREEN_1_Pin | RED_2_Pin
 80005da:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80005de:	60bb      	str	r3, [r7, #8]
			| YELLOW_2_Pin | GREEN_2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	2302      	movs	r3, #2
 80005ea:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	4619      	mov	r1, r3
 80005f2:	480b      	ldr	r0, [pc, #44]	; (8000620 <MX_GPIO_Init+0xa0>)
 80005f4:	f000 fa0e 	bl	8000a14 <HAL_GPIO_Init>

	/*Configure GPIO pins : segA_Pin segB_Pin segC_Pin segD_Pin
	 segE_Pin segF_Pin segG_Pin */
	GPIO_InitStruct.Pin = segA_Pin | segB_Pin | segC_Pin | segD_Pin | segE_Pin
 80005f8:	237f      	movs	r3, #127	; 0x7f
 80005fa:	60bb      	str	r3, [r7, #8]
			| segF_Pin | segG_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fc:	2301      	movs	r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2302      	movs	r3, #2
 8000606:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	4619      	mov	r1, r3
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <MX_GPIO_Init+0xa4>)
 8000610:	f000 fa00 	bl	8000a14 <HAL_GPIO_Init>

}
 8000614:	bf00      	nop
 8000616:	3718      	adds	r7, #24
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40021000 	.word	0x40021000
 8000620:	40010800 	.word	0x40010800
 8000624:	40010c00 	.word	0x40010c00

08000628 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800062c:	b672      	cpsid	i
}
 800062e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000630:	e7fe      	b.n	8000630 <Error_Handler+0x8>
	...

08000634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <HAL_MspInit+0x5c>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	4a14      	ldr	r2, [pc, #80]	; (8000690 <HAL_MspInit+0x5c>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6193      	str	r3, [r2, #24]
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_MspInit+0x5c>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <HAL_MspInit+0x5c>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <HAL_MspInit+0x5c>)
 8000658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065c:	61d3      	str	r3, [r2, #28]
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <HAL_MspInit+0x5c>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <HAL_MspInit+0x60>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <HAL_MspInit+0x60>)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	40021000 	.word	0x40021000
 8000694:	40010000 	.word	0x40010000

08000698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800069c:	e7fe      	b.n	800069c <NMI_Handler+0x4>

0800069e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <HardFault_Handler+0x4>

080006a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <MemManage_Handler+0x4>

080006aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <BusFault_Handler+0x4>

080006b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <UsageFault_Handler+0x4>

080006b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr

080006c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr

080006ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr

080006da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006de:	f000 f875 	bl	80007cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr
	...

080006f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006f4:	f7ff fff7 	bl	80006e6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f8:	480b      	ldr	r0, [pc, #44]	; (8000728 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006fa:	490c      	ldr	r1, [pc, #48]	; (800072c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006fc:	4a0c      	ldr	r2, [pc, #48]	; (8000730 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000700:	e002      	b.n	8000708 <LoopCopyDataInit>

08000702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000706:	3304      	adds	r3, #4

08000708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800070c:	d3f9      	bcc.n	8000702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070e:	4a09      	ldr	r2, [pc, #36]	; (8000734 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000710:	4c09      	ldr	r4, [pc, #36]	; (8000738 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000714:	e001      	b.n	800071a <LoopFillZerobss>

08000716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000718:	3204      	adds	r2, #4

0800071a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800071c:	d3fb      	bcc.n	8000716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800071e:	f000 fee7 	bl	80014f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000722:	f7ff fee3 	bl	80004ec <main>
  bx lr
 8000726:	4770      	bx	lr
  ldr r0, =_sdata
 8000728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800072c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000730:	0800158c 	.word	0x0800158c
  ldr r2, =_sbss
 8000734:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000738:	20000034 	.word	0x20000034

0800073c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800073c:	e7fe      	b.n	800073c <ADC1_2_IRQHandler>
	...

08000740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <HAL_Init+0x28>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a07      	ldr	r2, [pc, #28]	; (8000768 <HAL_Init+0x28>)
 800074a:	f043 0310 	orr.w	r3, r3, #16
 800074e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000750:	2003      	movs	r0, #3
 8000752:	f000 f92b 	bl	80009ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000756:	200f      	movs	r0, #15
 8000758:	f000 f808 	bl	800076c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800075c:	f7ff ff6a 	bl	8000634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40022000 	.word	0x40022000

0800076c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <HAL_InitTick+0x54>)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_InitTick+0x58>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	4619      	mov	r1, r3
 800077e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000782:	fbb3 f3f1 	udiv	r3, r3, r1
 8000786:	fbb2 f3f3 	udiv	r3, r2, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f000 f935 	bl	80009fa <HAL_SYSTICK_Config>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	e00e      	b.n	80007b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b0f      	cmp	r3, #15
 800079e:	d80a      	bhi.n	80007b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a0:	2200      	movs	r2, #0
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	f04f 30ff 	mov.w	r0, #4294967295
 80007a8:	f000 f90b 	bl	80009c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007ac:	4a06      	ldr	r2, [pc, #24]	; (80007c8 <HAL_InitTick+0x5c>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007b2:	2300      	movs	r3, #0
 80007b4:	e000      	b.n	80007b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000004 	.word	0x20000004

080007cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <HAL_IncTick+0x1c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_IncTick+0x20>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4413      	add	r3, r2
 80007dc:	4a03      	ldr	r2, [pc, #12]	; (80007ec <HAL_IncTick+0x20>)
 80007de:	6013      	str	r3, [r2, #0]
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr
 80007e8:	20000008 	.word	0x20000008
 80007ec:	20000030 	.word	0x20000030

080007f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return uwTick;
 80007f4:	4b02      	ldr	r3, [pc, #8]	; (8000800 <HAL_GetTick+0x10>)
 80007f6:	681b      	ldr	r3, [r3, #0]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	20000030 	.word	0x20000030

08000804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800080c:	f7ff fff0 	bl	80007f0 <HAL_GetTick>
 8000810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800081c:	d005      	beq.n	800082a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <HAL_Delay+0x44>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	461a      	mov	r2, r3
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	4413      	add	r3, r2
 8000828:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800082a:	bf00      	nop
 800082c:	f7ff ffe0 	bl	80007f0 <HAL_GetTick>
 8000830:	4602      	mov	r2, r0
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	429a      	cmp	r2, r3
 800083a:	d8f7      	bhi.n	800082c <HAL_Delay+0x28>
  {
  }
}
 800083c:	bf00      	nop
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000008 	.word	0x20000008

0800084c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <__NVIC_SetPriorityGrouping+0x44>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000868:	4013      	ands	r3, r2
 800086a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800087e:	4a04      	ldr	r2, [pc, #16]	; (8000890 <__NVIC_SetPriorityGrouping+0x44>)
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	60d3      	str	r3, [r2, #12]
}
 8000884:	bf00      	nop
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <__NVIC_GetPriorityGrouping+0x18>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	0a1b      	lsrs	r3, r3, #8
 800089e:	f003 0307 	and.w	r3, r3, #7
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	db0a      	blt.n	80008da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	490c      	ldr	r1, [pc, #48]	; (80008fc <__NVIC_SetPriority+0x4c>)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	0112      	lsls	r2, r2, #4
 80008d0:	b2d2      	uxtb	r2, r2
 80008d2:	440b      	add	r3, r1
 80008d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d8:	e00a      	b.n	80008f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4908      	ldr	r1, [pc, #32]	; (8000900 <__NVIC_SetPriority+0x50>)
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	f003 030f 	and.w	r3, r3, #15
 80008e6:	3b04      	subs	r3, #4
 80008e8:	0112      	lsls	r2, r2, #4
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	440b      	add	r3, r1
 80008ee:	761a      	strb	r2, [r3, #24]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000e100 	.word	0xe000e100
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000904:	b480      	push	{r7}
 8000906:	b089      	sub	sp, #36	; 0x24
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	f1c3 0307 	rsb	r3, r3, #7
 800091e:	2b04      	cmp	r3, #4
 8000920:	bf28      	it	cs
 8000922:	2304      	movcs	r3, #4
 8000924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3304      	adds	r3, #4
 800092a:	2b06      	cmp	r3, #6
 800092c:	d902      	bls.n	8000934 <NVIC_EncodePriority+0x30>
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3b03      	subs	r3, #3
 8000932:	e000      	b.n	8000936 <NVIC_EncodePriority+0x32>
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	f04f 32ff 	mov.w	r2, #4294967295
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43da      	mvns	r2, r3
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	401a      	ands	r2, r3
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800094c:	f04f 31ff 	mov.w	r1, #4294967295
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	fa01 f303 	lsl.w	r3, r1, r3
 8000956:	43d9      	mvns	r1, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	4313      	orrs	r3, r2
         );
}
 800095e:	4618      	mov	r0, r3
 8000960:	3724      	adds	r7, #36	; 0x24
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr

08000968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3b01      	subs	r3, #1
 8000974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000978:	d301      	bcc.n	800097e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800097a:	2301      	movs	r3, #1
 800097c:	e00f      	b.n	800099e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <SysTick_Config+0x40>)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3b01      	subs	r3, #1
 8000984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000986:	210f      	movs	r1, #15
 8000988:	f04f 30ff 	mov.w	r0, #4294967295
 800098c:	f7ff ff90 	bl	80008b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <SysTick_Config+0x40>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000996:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <SysTick_Config+0x40>)
 8000998:	2207      	movs	r2, #7
 800099a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	e000e010 	.word	0xe000e010

080009ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff49 	bl	800084c <__NVIC_SetPriorityGrouping>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b086      	sub	sp, #24
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	4603      	mov	r3, r0
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	607a      	str	r2, [r7, #4]
 80009ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009d4:	f7ff ff5e 	bl	8000894 <__NVIC_GetPriorityGrouping>
 80009d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	68b9      	ldr	r1, [r7, #8]
 80009de:	6978      	ldr	r0, [r7, #20]
 80009e0:	f7ff ff90 	bl	8000904 <NVIC_EncodePriority>
 80009e4:	4602      	mov	r2, r0
 80009e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ea:	4611      	mov	r1, r2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff5f 	bl	80008b0 <__NVIC_SetPriority>
}
 80009f2:	bf00      	nop
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff ffb0 	bl	8000968 <SysTick_Config>
 8000a08:	4603      	mov	r3, r0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b08b      	sub	sp, #44	; 0x2c
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a26:	e148      	b.n	8000cba <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	69fa      	ldr	r2, [r7, #28]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	f040 8137 	bne.w	8000cb4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	4aa3      	ldr	r2, [pc, #652]	; (8000cd8 <HAL_GPIO_Init+0x2c4>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d05e      	beq.n	8000b0e <HAL_GPIO_Init+0xfa>
 8000a50:	4aa1      	ldr	r2, [pc, #644]	; (8000cd8 <HAL_GPIO_Init+0x2c4>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d875      	bhi.n	8000b42 <HAL_GPIO_Init+0x12e>
 8000a56:	4aa1      	ldr	r2, [pc, #644]	; (8000cdc <HAL_GPIO_Init+0x2c8>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d058      	beq.n	8000b0e <HAL_GPIO_Init+0xfa>
 8000a5c:	4a9f      	ldr	r2, [pc, #636]	; (8000cdc <HAL_GPIO_Init+0x2c8>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d86f      	bhi.n	8000b42 <HAL_GPIO_Init+0x12e>
 8000a62:	4a9f      	ldr	r2, [pc, #636]	; (8000ce0 <HAL_GPIO_Init+0x2cc>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d052      	beq.n	8000b0e <HAL_GPIO_Init+0xfa>
 8000a68:	4a9d      	ldr	r2, [pc, #628]	; (8000ce0 <HAL_GPIO_Init+0x2cc>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d869      	bhi.n	8000b42 <HAL_GPIO_Init+0x12e>
 8000a6e:	4a9d      	ldr	r2, [pc, #628]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d04c      	beq.n	8000b0e <HAL_GPIO_Init+0xfa>
 8000a74:	4a9b      	ldr	r2, [pc, #620]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d863      	bhi.n	8000b42 <HAL_GPIO_Init+0x12e>
 8000a7a:	4a9b      	ldr	r2, [pc, #620]	; (8000ce8 <HAL_GPIO_Init+0x2d4>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d046      	beq.n	8000b0e <HAL_GPIO_Init+0xfa>
 8000a80:	4a99      	ldr	r2, [pc, #612]	; (8000ce8 <HAL_GPIO_Init+0x2d4>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d85d      	bhi.n	8000b42 <HAL_GPIO_Init+0x12e>
 8000a86:	2b12      	cmp	r3, #18
 8000a88:	d82a      	bhi.n	8000ae0 <HAL_GPIO_Init+0xcc>
 8000a8a:	2b12      	cmp	r3, #18
 8000a8c:	d859      	bhi.n	8000b42 <HAL_GPIO_Init+0x12e>
 8000a8e:	a201      	add	r2, pc, #4	; (adr r2, 8000a94 <HAL_GPIO_Init+0x80>)
 8000a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a94:	08000b0f 	.word	0x08000b0f
 8000a98:	08000ae9 	.word	0x08000ae9
 8000a9c:	08000afb 	.word	0x08000afb
 8000aa0:	08000b3d 	.word	0x08000b3d
 8000aa4:	08000b43 	.word	0x08000b43
 8000aa8:	08000b43 	.word	0x08000b43
 8000aac:	08000b43 	.word	0x08000b43
 8000ab0:	08000b43 	.word	0x08000b43
 8000ab4:	08000b43 	.word	0x08000b43
 8000ab8:	08000b43 	.word	0x08000b43
 8000abc:	08000b43 	.word	0x08000b43
 8000ac0:	08000b43 	.word	0x08000b43
 8000ac4:	08000b43 	.word	0x08000b43
 8000ac8:	08000b43 	.word	0x08000b43
 8000acc:	08000b43 	.word	0x08000b43
 8000ad0:	08000b43 	.word	0x08000b43
 8000ad4:	08000b43 	.word	0x08000b43
 8000ad8:	08000af1 	.word	0x08000af1
 8000adc:	08000b05 	.word	0x08000b05
 8000ae0:	4a82      	ldr	r2, [pc, #520]	; (8000cec <HAL_GPIO_Init+0x2d8>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d013      	beq.n	8000b0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ae6:	e02c      	b.n	8000b42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	623b      	str	r3, [r7, #32]
          break;
 8000aee:	e029      	b.n	8000b44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	3304      	adds	r3, #4
 8000af6:	623b      	str	r3, [r7, #32]
          break;
 8000af8:	e024      	b.n	8000b44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	3308      	adds	r3, #8
 8000b00:	623b      	str	r3, [r7, #32]
          break;
 8000b02:	e01f      	b.n	8000b44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	330c      	adds	r3, #12
 8000b0a:	623b      	str	r3, [r7, #32]
          break;
 8000b0c:	e01a      	b.n	8000b44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d102      	bne.n	8000b1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b16:	2304      	movs	r3, #4
 8000b18:	623b      	str	r3, [r7, #32]
          break;
 8000b1a:	e013      	b.n	8000b44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d105      	bne.n	8000b30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b24:	2308      	movs	r3, #8
 8000b26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	611a      	str	r2, [r3, #16]
          break;
 8000b2e:	e009      	b.n	8000b44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b30:	2308      	movs	r3, #8
 8000b32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	69fa      	ldr	r2, [r7, #28]
 8000b38:	615a      	str	r2, [r3, #20]
          break;
 8000b3a:	e003      	b.n	8000b44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
          break;
 8000b40:	e000      	b.n	8000b44 <HAL_GPIO_Init+0x130>
          break;
 8000b42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	2bff      	cmp	r3, #255	; 0xff
 8000b48:	d801      	bhi.n	8000b4e <HAL_GPIO_Init+0x13a>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	e001      	b.n	8000b52 <HAL_GPIO_Init+0x13e>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3304      	adds	r3, #4
 8000b52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	2bff      	cmp	r3, #255	; 0xff
 8000b58:	d802      	bhi.n	8000b60 <HAL_GPIO_Init+0x14c>
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	e002      	b.n	8000b66 <HAL_GPIO_Init+0x152>
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	3b08      	subs	r3, #8
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	210f      	movs	r1, #15
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	fa01 f303 	lsl.w	r3, r1, r3
 8000b74:	43db      	mvns	r3, r3
 8000b76:	401a      	ands	r2, r3
 8000b78:	6a39      	ldr	r1, [r7, #32]
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b80:	431a      	orrs	r2, r3
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f000 8090 	beq.w	8000cb4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b94:	4b56      	ldr	r3, [pc, #344]	; (8000cf0 <HAL_GPIO_Init+0x2dc>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a55      	ldr	r2, [pc, #340]	; (8000cf0 <HAL_GPIO_Init+0x2dc>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6193      	str	r3, [r2, #24]
 8000ba0:	4b53      	ldr	r3, [pc, #332]	; (8000cf0 <HAL_GPIO_Init+0x2dc>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bac:	4a51      	ldr	r2, [pc, #324]	; (8000cf4 <HAL_GPIO_Init+0x2e0>)
 8000bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb0:	089b      	lsrs	r3, r3, #2
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	220f      	movs	r2, #15
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a49      	ldr	r2, [pc, #292]	; (8000cf8 <HAL_GPIO_Init+0x2e4>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d00d      	beq.n	8000bf4 <HAL_GPIO_Init+0x1e0>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a48      	ldr	r2, [pc, #288]	; (8000cfc <HAL_GPIO_Init+0x2e8>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d007      	beq.n	8000bf0 <HAL_GPIO_Init+0x1dc>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a47      	ldr	r2, [pc, #284]	; (8000d00 <HAL_GPIO_Init+0x2ec>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d101      	bne.n	8000bec <HAL_GPIO_Init+0x1d8>
 8000be8:	2302      	movs	r3, #2
 8000bea:	e004      	b.n	8000bf6 <HAL_GPIO_Init+0x1e2>
 8000bec:	2303      	movs	r3, #3
 8000bee:	e002      	b.n	8000bf6 <HAL_GPIO_Init+0x1e2>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e000      	b.n	8000bf6 <HAL_GPIO_Init+0x1e2>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bf8:	f002 0203 	and.w	r2, r2, #3
 8000bfc:	0092      	lsls	r2, r2, #2
 8000bfe:	4093      	lsls	r3, r2
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c06:	493b      	ldr	r1, [pc, #236]	; (8000cf4 <HAL_GPIO_Init+0x2e0>)
 8000c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0a:	089b      	lsrs	r3, r3, #2
 8000c0c:	3302      	adds	r3, #2
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d006      	beq.n	8000c2e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c20:	4b38      	ldr	r3, [pc, #224]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000c22:	689a      	ldr	r2, [r3, #8]
 8000c24:	4937      	ldr	r1, [pc, #220]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	608b      	str	r3, [r1, #8]
 8000c2c:	e006      	b.n	8000c3c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c2e:	4b35      	ldr	r3, [pc, #212]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	4933      	ldr	r1, [pc, #204]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d006      	beq.n	8000c56 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c48:	4b2e      	ldr	r3, [pc, #184]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000c4a:	68da      	ldr	r2, [r3, #12]
 8000c4c:	492d      	ldr	r1, [pc, #180]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	60cb      	str	r3, [r1, #12]
 8000c54:	e006      	b.n	8000c64 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c56:	4b2b      	ldr	r3, [pc, #172]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000c58:	68da      	ldr	r2, [r3, #12]
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	4929      	ldr	r1, [pc, #164]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000c60:	4013      	ands	r3, r2
 8000c62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d006      	beq.n	8000c7e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c70:	4b24      	ldr	r3, [pc, #144]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	4923      	ldr	r1, [pc, #140]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	604b      	str	r3, [r1, #4]
 8000c7c:	e006      	b.n	8000c8c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000c80:	685a      	ldr	r2, [r3, #4]
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	43db      	mvns	r3, r3
 8000c86:	491f      	ldr	r1, [pc, #124]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000c88:	4013      	ands	r3, r2
 8000c8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d006      	beq.n	8000ca6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c98:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4919      	ldr	r1, [pc, #100]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	600b      	str	r3, [r1, #0]
 8000ca4:	e006      	b.n	8000cb4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	43db      	mvns	r3, r3
 8000cae:	4915      	ldr	r1, [pc, #84]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f47f aeaf 	bne.w	8000a28 <HAL_GPIO_Init+0x14>
  }
}
 8000cca:	bf00      	nop
 8000ccc:	bf00      	nop
 8000cce:	372c      	adds	r7, #44	; 0x2c
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	10320000 	.word	0x10320000
 8000cdc:	10310000 	.word	0x10310000
 8000ce0:	10220000 	.word	0x10220000
 8000ce4:	10210000 	.word	0x10210000
 8000ce8:	10120000 	.word	0x10120000
 8000cec:	10110000 	.word	0x10110000
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40010000 	.word	0x40010000
 8000cf8:	40010800 	.word	0x40010800
 8000cfc:	40010c00 	.word	0x40010c00
 8000d00:	40011000 	.word	0x40011000
 8000d04:	40010400 	.word	0x40010400

08000d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	807b      	strh	r3, [r7, #2]
 8000d14:	4613      	mov	r3, r2
 8000d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d18:	787b      	ldrb	r3, [r7, #1]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d1e:	887a      	ldrh	r2, [r7, #2]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d24:	e003      	b.n	8000d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d26:	887b      	ldrh	r3, [r7, #2]
 8000d28:	041a      	lsls	r2, r3, #16
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	611a      	str	r2, [r3, #16]
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d101      	bne.n	8000d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e26c      	b.n	8001224 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f000 8087 	beq.w	8000e66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d58:	4b92      	ldr	r3, [pc, #584]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 030c 	and.w	r3, r3, #12
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	d00c      	beq.n	8000d7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d64:	4b8f      	ldr	r3, [pc, #572]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 030c 	and.w	r3, r3, #12
 8000d6c:	2b08      	cmp	r3, #8
 8000d6e:	d112      	bne.n	8000d96 <HAL_RCC_OscConfig+0x5e>
 8000d70:	4b8c      	ldr	r3, [pc, #560]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d7c:	d10b      	bne.n	8000d96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d7e:	4b89      	ldr	r3, [pc, #548]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d06c      	beq.n	8000e64 <HAL_RCC_OscConfig+0x12c>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d168      	bne.n	8000e64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e246      	b.n	8001224 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d9e:	d106      	bne.n	8000dae <HAL_RCC_OscConfig+0x76>
 8000da0:	4b80      	ldr	r3, [pc, #512]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a7f      	ldr	r2, [pc, #508]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	e02e      	b.n	8000e0c <HAL_RCC_OscConfig+0xd4>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d10c      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x98>
 8000db6:	4b7b      	ldr	r3, [pc, #492]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a7a      	ldr	r2, [pc, #488]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	4b78      	ldr	r3, [pc, #480]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a77      	ldr	r2, [pc, #476]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	e01d      	b.n	8000e0c <HAL_RCC_OscConfig+0xd4>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dd8:	d10c      	bne.n	8000df4 <HAL_RCC_OscConfig+0xbc>
 8000dda:	4b72      	ldr	r3, [pc, #456]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a71      	ldr	r2, [pc, #452]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	4b6f      	ldr	r3, [pc, #444]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a6e      	ldr	r2, [pc, #440]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	e00b      	b.n	8000e0c <HAL_RCC_OscConfig+0xd4>
 8000df4:	4b6b      	ldr	r3, [pc, #428]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a6a      	ldr	r2, [pc, #424]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	4b68      	ldr	r3, [pc, #416]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a67      	ldr	r2, [pc, #412]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d013      	beq.n	8000e3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e14:	f7ff fcec 	bl	80007f0 <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e1c:	f7ff fce8 	bl	80007f0 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b64      	cmp	r3, #100	; 0x64
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e1fa      	b.n	8001224 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e2e:	4b5d      	ldr	r3, [pc, #372]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f0      	beq.n	8000e1c <HAL_RCC_OscConfig+0xe4>
 8000e3a:	e014      	b.n	8000e66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3c:	f7ff fcd8 	bl	80007f0 <HAL_GetTick>
 8000e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e42:	e008      	b.n	8000e56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e44:	f7ff fcd4 	bl	80007f0 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b64      	cmp	r3, #100	; 0x64
 8000e50:	d901      	bls.n	8000e56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e1e6      	b.n	8001224 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e56:	4b53      	ldr	r3, [pc, #332]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f0      	bne.n	8000e44 <HAL_RCC_OscConfig+0x10c>
 8000e62:	e000      	b.n	8000e66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d063      	beq.n	8000f3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e72:	4b4c      	ldr	r3, [pc, #304]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 030c 	and.w	r3, r3, #12
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00b      	beq.n	8000e96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e7e:	4b49      	ldr	r3, [pc, #292]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 030c 	and.w	r3, r3, #12
 8000e86:	2b08      	cmp	r3, #8
 8000e88:	d11c      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x18c>
 8000e8a:	4b46      	ldr	r3, [pc, #280]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d116      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e96:	4b43      	ldr	r3, [pc, #268]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d005      	beq.n	8000eae <HAL_RCC_OscConfig+0x176>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d001      	beq.n	8000eae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e1ba      	b.n	8001224 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eae:	4b3d      	ldr	r3, [pc, #244]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	4939      	ldr	r1, [pc, #228]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ec2:	e03a      	b.n	8000f3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d020      	beq.n	8000f0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ecc:	4b36      	ldr	r3, [pc, #216]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed2:	f7ff fc8d 	bl	80007f0 <HAL_GetTick>
 8000ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed8:	e008      	b.n	8000eec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eda:	f7ff fc89 	bl	80007f0 <HAL_GetTick>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e19b      	b.n	8001224 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eec:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0f0      	beq.n	8000eda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef8:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	4927      	ldr	r1, [pc, #156]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	600b      	str	r3, [r1, #0]
 8000f0c:	e015      	b.n	8000f3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f0e:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <HAL_RCC_OscConfig+0x270>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f14:	f7ff fc6c 	bl	80007f0 <HAL_GetTick>
 8000f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f1c:	f7ff fc68 	bl	80007f0 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e17a      	b.n	8001224 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1f0      	bne.n	8000f1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0308 	and.w	r3, r3, #8
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d03a      	beq.n	8000fbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d019      	beq.n	8000f82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <HAL_RCC_OscConfig+0x274>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f54:	f7ff fc4c 	bl	80007f0 <HAL_GetTick>
 8000f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f5c:	f7ff fc48 	bl	80007f0 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e15a      	b.n	8001224 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0f0      	beq.n	8000f5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f000 fa9a 	bl	80014b4 <RCC_Delay>
 8000f80:	e01c      	b.n	8000fbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_RCC_OscConfig+0x274>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f88:	f7ff fc32 	bl	80007f0 <HAL_GetTick>
 8000f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f8e:	e00f      	b.n	8000fb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f90:	f7ff fc2e 	bl	80007f0 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d908      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e140      	b.n	8001224 <HAL_RCC_OscConfig+0x4ec>
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	42420000 	.word	0x42420000
 8000fac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fb0:	4b9e      	ldr	r3, [pc, #632]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 8000fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1e9      	bne.n	8000f90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f000 80a6 	beq.w	8001116 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fce:	4b97      	ldr	r3, [pc, #604]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10d      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	4b94      	ldr	r3, [pc, #592]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	4a93      	ldr	r2, [pc, #588]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	61d3      	str	r3, [r2, #28]
 8000fe6:	4b91      	ldr	r3, [pc, #580]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff6:	4b8e      	ldr	r3, [pc, #568]	; (8001230 <HAL_RCC_OscConfig+0x4f8>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d118      	bne.n	8001034 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001002:	4b8b      	ldr	r3, [pc, #556]	; (8001230 <HAL_RCC_OscConfig+0x4f8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a8a      	ldr	r2, [pc, #552]	; (8001230 <HAL_RCC_OscConfig+0x4f8>)
 8001008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800100c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800100e:	f7ff fbef 	bl	80007f0 <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001016:	f7ff fbeb 	bl	80007f0 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b64      	cmp	r3, #100	; 0x64
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e0fd      	b.n	8001224 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001028:	4b81      	ldr	r3, [pc, #516]	; (8001230 <HAL_RCC_OscConfig+0x4f8>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0f0      	beq.n	8001016 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d106      	bne.n	800104a <HAL_RCC_OscConfig+0x312>
 800103c:	4b7b      	ldr	r3, [pc, #492]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	4a7a      	ldr	r2, [pc, #488]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	6213      	str	r3, [r2, #32]
 8001048:	e02d      	b.n	80010a6 <HAL_RCC_OscConfig+0x36e>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d10c      	bne.n	800106c <HAL_RCC_OscConfig+0x334>
 8001052:	4b76      	ldr	r3, [pc, #472]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 8001054:	6a1b      	ldr	r3, [r3, #32]
 8001056:	4a75      	ldr	r2, [pc, #468]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 8001058:	f023 0301 	bic.w	r3, r3, #1
 800105c:	6213      	str	r3, [r2, #32]
 800105e:	4b73      	ldr	r3, [pc, #460]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 8001060:	6a1b      	ldr	r3, [r3, #32]
 8001062:	4a72      	ldr	r2, [pc, #456]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 8001064:	f023 0304 	bic.w	r3, r3, #4
 8001068:	6213      	str	r3, [r2, #32]
 800106a:	e01c      	b.n	80010a6 <HAL_RCC_OscConfig+0x36e>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	2b05      	cmp	r3, #5
 8001072:	d10c      	bne.n	800108e <HAL_RCC_OscConfig+0x356>
 8001074:	4b6d      	ldr	r3, [pc, #436]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 8001076:	6a1b      	ldr	r3, [r3, #32]
 8001078:	4a6c      	ldr	r2, [pc, #432]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	6213      	str	r3, [r2, #32]
 8001080:	4b6a      	ldr	r3, [pc, #424]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	4a69      	ldr	r2, [pc, #420]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6213      	str	r3, [r2, #32]
 800108c:	e00b      	b.n	80010a6 <HAL_RCC_OscConfig+0x36e>
 800108e:	4b67      	ldr	r3, [pc, #412]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 8001090:	6a1b      	ldr	r3, [r3, #32]
 8001092:	4a66      	ldr	r2, [pc, #408]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 8001094:	f023 0301 	bic.w	r3, r3, #1
 8001098:	6213      	str	r3, [r2, #32]
 800109a:	4b64      	ldr	r3, [pc, #400]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	4a63      	ldr	r2, [pc, #396]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 80010a0:	f023 0304 	bic.w	r3, r3, #4
 80010a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d015      	beq.n	80010da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ae:	f7ff fb9f 	bl	80007f0 <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b4:	e00a      	b.n	80010cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010b6:	f7ff fb9b 	bl	80007f0 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e0ab      	b.n	8001224 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010cc:	4b57      	ldr	r3, [pc, #348]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0ee      	beq.n	80010b6 <HAL_RCC_OscConfig+0x37e>
 80010d8:	e014      	b.n	8001104 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010da:	f7ff fb89 	bl	80007f0 <HAL_GetTick>
 80010de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010e0:	e00a      	b.n	80010f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010e2:	f7ff fb85 	bl	80007f0 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e095      	b.n	8001224 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f8:	4b4c      	ldr	r3, [pc, #304]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1ee      	bne.n	80010e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001104:	7dfb      	ldrb	r3, [r7, #23]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d105      	bne.n	8001116 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800110a:	4b48      	ldr	r3, [pc, #288]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	4a47      	ldr	r2, [pc, #284]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 8001110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001114:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 8081 	beq.w	8001222 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001120:	4b42      	ldr	r3, [pc, #264]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 030c 	and.w	r3, r3, #12
 8001128:	2b08      	cmp	r3, #8
 800112a:	d061      	beq.n	80011f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69db      	ldr	r3, [r3, #28]
 8001130:	2b02      	cmp	r3, #2
 8001132:	d146      	bne.n	80011c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001134:	4b3f      	ldr	r3, [pc, #252]	; (8001234 <HAL_RCC_OscConfig+0x4fc>)
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113a:	f7ff fb59 	bl	80007f0 <HAL_GetTick>
 800113e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001140:	e008      	b.n	8001154 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001142:	f7ff fb55 	bl	80007f0 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e067      	b.n	8001224 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001154:	4b35      	ldr	r3, [pc, #212]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1f0      	bne.n	8001142 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001168:	d108      	bne.n	800117c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800116a:	4b30      	ldr	r3, [pc, #192]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	492d      	ldr	r1, [pc, #180]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 8001178:	4313      	orrs	r3, r2
 800117a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800117c:	4b2b      	ldr	r3, [pc, #172]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a19      	ldr	r1, [r3, #32]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118c:	430b      	orrs	r3, r1
 800118e:	4927      	ldr	r1, [pc, #156]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 8001190:	4313      	orrs	r3, r2
 8001192:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001194:	4b27      	ldr	r3, [pc, #156]	; (8001234 <HAL_RCC_OscConfig+0x4fc>)
 8001196:	2201      	movs	r2, #1
 8001198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119a:	f7ff fb29 	bl	80007f0 <HAL_GetTick>
 800119e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011a0:	e008      	b.n	80011b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011a2:	f7ff fb25 	bl	80007f0 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d901      	bls.n	80011b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e037      	b.n	8001224 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0f0      	beq.n	80011a2 <HAL_RCC_OscConfig+0x46a>
 80011c0:	e02f      	b.n	8001222 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <HAL_RCC_OscConfig+0x4fc>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c8:	f7ff fb12 	bl	80007f0 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011d0:	f7ff fb0e 	bl	80007f0 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e020      	b.n	8001224 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0x498>
 80011ee:	e018      	b.n	8001222 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69db      	ldr	r3, [r3, #28]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d101      	bne.n	80011fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e013      	b.n	8001224 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <HAL_RCC_OscConfig+0x4f4>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	429a      	cmp	r2, r3
 800120e:	d106      	bne.n	800121e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800121a:	429a      	cmp	r2, r3
 800121c:	d001      	beq.n	8001222 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40021000 	.word	0x40021000
 8001230:	40007000 	.word	0x40007000
 8001234:	42420060 	.word	0x42420060

08001238 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d101      	bne.n	800124c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e0d0      	b.n	80013ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800124c:	4b6a      	ldr	r3, [pc, #424]	; (80013f8 <HAL_RCC_ClockConfig+0x1c0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0307 	and.w	r3, r3, #7
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	d910      	bls.n	800127c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800125a:	4b67      	ldr	r3, [pc, #412]	; (80013f8 <HAL_RCC_ClockConfig+0x1c0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f023 0207 	bic.w	r2, r3, #7
 8001262:	4965      	ldr	r1, [pc, #404]	; (80013f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	4313      	orrs	r3, r2
 8001268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800126a:	4b63      	ldr	r3, [pc, #396]	; (80013f8 <HAL_RCC_ClockConfig+0x1c0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	d001      	beq.n	800127c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e0b8      	b.n	80013ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d020      	beq.n	80012ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	d005      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001294:	4b59      	ldr	r3, [pc, #356]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	4a58      	ldr	r2, [pc, #352]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 800129a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800129e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d005      	beq.n	80012b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012ac:	4b53      	ldr	r3, [pc, #332]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	4a52      	ldr	r2, [pc, #328]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 80012b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012b8:	4b50      	ldr	r3, [pc, #320]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	494d      	ldr	r1, [pc, #308]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d040      	beq.n	8001358 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d107      	bne.n	80012ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012de:	4b47      	ldr	r3, [pc, #284]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d115      	bne.n	8001316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e07f      	b.n	80013ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d107      	bne.n	8001306 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f6:	4b41      	ldr	r3, [pc, #260]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d109      	bne.n	8001316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e073      	b.n	80013ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001306:	4b3d      	ldr	r3, [pc, #244]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e06b      	b.n	80013ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001316:	4b39      	ldr	r3, [pc, #228]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f023 0203 	bic.w	r2, r3, #3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	4936      	ldr	r1, [pc, #216]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 8001324:	4313      	orrs	r3, r2
 8001326:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001328:	f7ff fa62 	bl	80007f0 <HAL_GetTick>
 800132c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800132e:	e00a      	b.n	8001346 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001330:	f7ff fa5e 	bl	80007f0 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	f241 3288 	movw	r2, #5000	; 0x1388
 800133e:	4293      	cmp	r3, r2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e053      	b.n	80013ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001346:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 020c 	and.w	r2, r3, #12
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	429a      	cmp	r2, r3
 8001356:	d1eb      	bne.n	8001330 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001358:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <HAL_RCC_ClockConfig+0x1c0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	d210      	bcs.n	8001388 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001366:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f023 0207 	bic.w	r2, r3, #7
 800136e:	4922      	ldr	r1, [pc, #136]	; (80013f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	d001      	beq.n	8001388 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e032      	b.n	80013ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	2b00      	cmp	r3, #0
 8001392:	d008      	beq.n	80013a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	4916      	ldr	r1, [pc, #88]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d009      	beq.n	80013c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	490e      	ldr	r1, [pc, #56]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013c6:	f000 f821 	bl	800140c <HAL_RCC_GetSysClockFreq>
 80013ca:	4602      	mov	r2, r0
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	091b      	lsrs	r3, r3, #4
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	490a      	ldr	r1, [pc, #40]	; (8001400 <HAL_RCC_ClockConfig+0x1c8>)
 80013d8:	5ccb      	ldrb	r3, [r1, r3]
 80013da:	fa22 f303 	lsr.w	r3, r2, r3
 80013de:	4a09      	ldr	r2, [pc, #36]	; (8001404 <HAL_RCC_ClockConfig+0x1cc>)
 80013e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_RCC_ClockConfig+0x1d0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f9c0 	bl	800076c <HAL_InitTick>

  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40022000 	.word	0x40022000
 80013fc:	40021000 	.word	0x40021000
 8001400:	08001560 	.word	0x08001560
 8001404:	20000000 	.word	0x20000000
 8001408:	20000004 	.word	0x20000004

0800140c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800140c:	b480      	push	{r7}
 800140e:	b087      	sub	sp, #28
 8001410:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001426:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 030c 	and.w	r3, r3, #12
 8001432:	2b04      	cmp	r3, #4
 8001434:	d002      	beq.n	800143c <HAL_RCC_GetSysClockFreq+0x30>
 8001436:	2b08      	cmp	r3, #8
 8001438:	d003      	beq.n	8001442 <HAL_RCC_GetSysClockFreq+0x36>
 800143a:	e027      	b.n	800148c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800143c:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800143e:	613b      	str	r3, [r7, #16]
      break;
 8001440:	e027      	b.n	8001492 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	0c9b      	lsrs	r3, r3, #18
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	4a17      	ldr	r2, [pc, #92]	; (80014a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800144c:	5cd3      	ldrb	r3, [r2, r3]
 800144e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d010      	beq.n	800147c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	0c5b      	lsrs	r3, r3, #17
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	4a11      	ldr	r2, [pc, #68]	; (80014ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001466:	5cd3      	ldrb	r3, [r2, r3]
 8001468:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800146e:	fb02 f203 	mul.w	r2, r2, r3
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	fbb2 f3f3 	udiv	r3, r2, r3
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	e004      	b.n	8001486 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a0c      	ldr	r2, [pc, #48]	; (80014b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001480:	fb02 f303 	mul.w	r3, r2, r3
 8001484:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	613b      	str	r3, [r7, #16]
      break;
 800148a:	e002      	b.n	8001492 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800148e:	613b      	str	r3, [r7, #16]
      break;
 8001490:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001492:	693b      	ldr	r3, [r7, #16]
}
 8001494:	4618      	mov	r0, r3
 8001496:	371c      	adds	r7, #28
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40021000 	.word	0x40021000
 80014a4:	007a1200 	.word	0x007a1200
 80014a8:	08001570 	.word	0x08001570
 80014ac:	08001580 	.word	0x08001580
 80014b0:	003d0900 	.word	0x003d0900

080014b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <RCC_Delay+0x34>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <RCC_Delay+0x38>)
 80014c2:	fba2 2303 	umull	r2, r3, r2, r3
 80014c6:	0a5b      	lsrs	r3, r3, #9
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	fb02 f303 	mul.w	r3, r2, r3
 80014ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014d0:	bf00      	nop
  }
  while (Delay --);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	1e5a      	subs	r2, r3, #1
 80014d6:	60fa      	str	r2, [r7, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f9      	bne.n	80014d0 <RCC_Delay+0x1c>
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	20000000 	.word	0x20000000
 80014ec:	10624dd3 	.word	0x10624dd3

080014f0 <__libc_init_array>:
 80014f0:	b570      	push	{r4, r5, r6, lr}
 80014f2:	2600      	movs	r6, #0
 80014f4:	4d0c      	ldr	r5, [pc, #48]	; (8001528 <__libc_init_array+0x38>)
 80014f6:	4c0d      	ldr	r4, [pc, #52]	; (800152c <__libc_init_array+0x3c>)
 80014f8:	1b64      	subs	r4, r4, r5
 80014fa:	10a4      	asrs	r4, r4, #2
 80014fc:	42a6      	cmp	r6, r4
 80014fe:	d109      	bne.n	8001514 <__libc_init_array+0x24>
 8001500:	f000 f822 	bl	8001548 <_init>
 8001504:	2600      	movs	r6, #0
 8001506:	4d0a      	ldr	r5, [pc, #40]	; (8001530 <__libc_init_array+0x40>)
 8001508:	4c0a      	ldr	r4, [pc, #40]	; (8001534 <__libc_init_array+0x44>)
 800150a:	1b64      	subs	r4, r4, r5
 800150c:	10a4      	asrs	r4, r4, #2
 800150e:	42a6      	cmp	r6, r4
 8001510:	d105      	bne.n	800151e <__libc_init_array+0x2e>
 8001512:	bd70      	pop	{r4, r5, r6, pc}
 8001514:	f855 3b04 	ldr.w	r3, [r5], #4
 8001518:	4798      	blx	r3
 800151a:	3601      	adds	r6, #1
 800151c:	e7ee      	b.n	80014fc <__libc_init_array+0xc>
 800151e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001522:	4798      	blx	r3
 8001524:	3601      	adds	r6, #1
 8001526:	e7f2      	b.n	800150e <__libc_init_array+0x1e>
 8001528:	08001584 	.word	0x08001584
 800152c:	08001584 	.word	0x08001584
 8001530:	08001584 	.word	0x08001584
 8001534:	08001588 	.word	0x08001588

08001538 <memset>:
 8001538:	4603      	mov	r3, r0
 800153a:	4402      	add	r2, r0
 800153c:	4293      	cmp	r3, r2
 800153e:	d100      	bne.n	8001542 <memset+0xa>
 8001540:	4770      	bx	lr
 8001542:	f803 1b01 	strb.w	r1, [r3], #1
 8001546:	e7f9      	b.n	800153c <memset+0x4>

08001548 <_init>:
 8001548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800154a:	bf00      	nop
 800154c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800154e:	bc08      	pop	{r3}
 8001550:	469e      	mov	lr, r3
 8001552:	4770      	bx	lr

08001554 <_fini>:
 8001554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001556:	bf00      	nop
 8001558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800155a:	bc08      	pop	{r3}
 800155c:	469e      	mov	lr, r3
 800155e:	4770      	bx	lr
